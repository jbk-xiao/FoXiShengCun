{"remainingRequest":"E:\\faxianbei\\faxianbei7.5\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\faxianbei\\faxianbei7.5\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\faxianbei\\faxianbei7.5\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\faxianbei\\faxianbei7.5\\src\\views\\Index.vue?vue&type=template&id=23543608&scoped=true&","dependencies":[{"path":"E:\\faxianbei\\faxianbei7.5\\src\\views\\Index.vue","mtime":1615200479036},{"path":"E:\\faxianbei\\faxianbei7.5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\faxianbei\\faxianbei7.5\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\faxianbei\\faxianbei7.5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\faxianbei\\faxianbei7.5\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCBbCiAgICBfYygKICAgICAgImRpdiIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJwYWdlLXdyYXBwZXIiIH0sCiAgICAgIFsKICAgICAgICBfYygiVG9Ub3AiKSwKICAgICAgICBfYygiSGVhZGVyIiksCiAgICAgICAgX2MoInNlYXJjaCIpLAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHJlZjogIm1lbnUiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZW51IiwgY2xhc3M6IHsgaXNfdG9wOiBfdm0uaXNUb3AgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl9tKDApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBjbGFzczogeyBwbGFjZWhvbGRlcjogX3ZtLnBsYWNlaG9sZGVyIH0gfSkKICAgICAgICAgIF0pCiAgICAgICAgXSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2NrIiwgYXR0cnM6IHsgaWQ6ICJvdmVyYWxsIiB9IH0sIFsKICAgICAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImFib3V0LW9uZSIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWJvdXQtb25lX19iZy1zaGFwZS0xIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9wdWJsaWMvaW1hZ2VzL2ljb25zL2Fib3V0LWJnLWljb24tMS0xLnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fbSgxKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTciIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJhYm91dC1vbmVfX2NvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX20oMiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgICAgICAgICAgICAgIF92bS5fbSg0KSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImFib3V0LW9uZV9faWNvbi1yb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTYiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImFib3V0LW9uZV9fYm94IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJhZ3Jpa29uLWljb24tZmFybWVyIiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaDQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogIi9TdHlsZSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIuafpeeci+a6r+a6kOS/oeaBryIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIuekuuS+iyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1sZy02IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJhYm91dC1vbmVfX2JveCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWdyaWtvbi1pY29uLWFncmljdWx0dXJlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImg0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvTGdtQ1BzIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5p+l55yL6JCl6ZSA5YiG5p6QIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIuekuuS+iyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0aG0tYnRuIiwgb246IHsgY2xpY2s6IF92bS50cmFucyB9IH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJEaXNjb3ZlciBNb3JlIildCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX20oNSksCiAgICAgICAgX3ZtLl9tKDYpLAogICAgICAgIF92bS5fbSg3KSwKICAgICAgICBfdm0uX20oOCksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl9tKDkpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogInNlcnZpY2Utb25lIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTEyIGNvbC1sZy0zIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2ctY2FyZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmxvZy1jYXJkX19pbWFnZSIgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vcHVibGljL2ltYWdlcy9zeS5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJCZXN0IFdheSB0byBEbyBFY28gYW5kIEFncmljdWx0dXJlIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdG86ICIvT3JpZ2luP3F1ZXJ5PTE2MTE5NzAxNjM0MTUwMDAwIiB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmxvZy1jYXJkX19jb250ZW50IiB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgxMCksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oMTEpLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRobS1idG4iLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRvOiAiL09yaWdpbj9xdWVyeT0xNjExOTcwMTYzNDE1MDAwMCIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJTZWUgTW9yZSIpXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTEyIGNvbC1sZy0zIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2ctY2FyZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmxvZy1jYXJkX19pbWFnZSIgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vcHVibGljL2ltYWdlcy9jb21wLmpwZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIkxldmVyYWdlIGFnaWxlIGZyYW1ld29ya3MgdG8gcHJvdmlkZSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICBfYygicm91dGVyLWxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL0xnbUNQcyIgfSB9KQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmxvZy1jYXJkX19jb250ZW50IiB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgxMiksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oMTMpLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0aG0tYnRuIiwgYXR0cnM6IHsgdG86ICIvTGdtQ1BzIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlNlZSBNb3JlIildCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMTIgY29sLWxnLTMiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYmxvZy1jYXJkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJibG9nLWNhcmRfX2ltYWdlIiB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9wdWJsaWMvaW1hZ2VzL2FuYWx5c2lzLmpwZyIpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogIi9MZ21DUHMiIH0gfSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImJsb2ctY2FyZF9fY29udGVudCIgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oMTQpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDE1KSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGhtLWJ0biIsIGF0dHJzOiB7IHRvOiAiL0xnbUNQcyIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJTZWUgTW9yZSIpXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTEyIGNvbC1sZy0zIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2ctY2FyZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmxvZy1jYXJkX19pbWFnZSIgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vcHVibGljL2ltYWdlcy9tYW5hZ2VtZW50LmpwZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIk9yZ2FuaWNhbGx5IGdyb3cgdGhlIGhvbGlzdGljIHdvcmxkIHZpZXciCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogIi9EZXRhaWwiIH0gfSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImJsb2ctY2FyZF9fY29udGVudCIgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oMTYpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDE3KSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGhtLWJ0biIsIGF0dHJzOiB7IHRvOiAiL0RldGFpbCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJTZWUgTW9yZSIpXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKAogICAgICAgICAgInNlY3Rpb24iLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogInByb2plY3QtZGV0YWlscyIsIGF0dHJzOiB7IGlkOiAidGVjaCIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX20oMTgpLAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJibG9jayIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImVsLWNhcm91c2VsIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBoZWlnaHQ6IF92bS5iYW5uZXJIZWlnaHQgKyAicHgiLCBpbnRlcnZhbDogMTUwMCB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZWwtY2Fyb3VzZWwtaXRlbSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjEwMCUiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vcHVibGljL2ltYWdlcy92dWUuanBnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogeyBsb2FkOiBfdm0uaW1nTG9hZCB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJlbC1jYXJvdXNlbC1pdGVtIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTAwJSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9wdWJsaWMvaW1hZ2VzL2VjaGFydHMuanBnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogeyBsb2FkOiBfdm0uaW1nTG9hZCB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJlbC1jYXJvdXNlbC1pdGVtIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTAwJSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9wdWJsaWMvaW1hZ2VzL3NwcmluZ2Jvb3QuanBnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogeyBsb2FkOiBfdm0uaW1nTG9hZCB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJlbC1jYXJvdXNlbC1pdGVtIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTAwJSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9wdWJsaWMvaW1hZ2VzL3JlZGlzLmpwZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsgbG9hZDogX3ZtLmltZ0xvYWQgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZWwtY2Fyb3VzZWwtaXRlbSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjEwMCUiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vcHVibGljL2ltYWdlcy9teXNxbC5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IGxvYWQ6IF92bS5pbWdMb2FkIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImVsLWNhcm91c2VsLWl0ZW0iLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMDAlIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL3B1YmxpYy9pbWFnZXMvbW9uZ29kYi5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IGxvYWQ6IF92bS5pbWdMb2FkIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImVsLWNhcm91c2VsLWl0ZW0iLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMDAlIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL3B1YmxpYy9pbWFnZXMvaGYuanBnIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogeyBsb2FkOiBfdm0uaW1nTG9hZCB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJlbC1jYXJvdXNlbC1pdGVtIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTAwJSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9wdWJsaWMvaW1hZ2VzL3B5LnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsgbG9hZDogX3ZtLmltZ0xvYWQgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZWwtY2Fyb3VzZWwtaXRlbSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjEwMCUiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vcHVibGljL2ltYWdlcy9iZXJyeS5qcGciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IGxvYWQ6IF92bS5pbWdMb2FkIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdCiAgICAgICAgICBdLAogICAgICAgICAgMgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX2MoIkZvb3RlciIpCiAgICAgIF0sCiAgICAgIDIKICAgICkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgInNlY3Rpb24iLAogICAgICB7IHN0YXRpY0NsYXNzOiAicHJvamVjdC1kZXRhaWxzIiwgYXR0cnM6IHsgaWQ6ICJ0b3AiIH0gfSwKICAgICAgWwogICAgICAgIF9jKCJuYXYiLCB7IHN0YXRpY0NsYXNzOiAibWFpbi1tZW51IiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiLCBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjEwMCUiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJtYWluLW1lbnVfX2xpc3QiIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICJwYWRkaW5nLXRvcCI6ICIwIiwKICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogIjBweCAyMHB4IDBweCAyMHB4IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJsaTEiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjIycHgiLCBmb250OiAiYm9sZGVyIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI292ZXJhbGwiIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCLmgLvop4giKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZHJvcGRvd24iLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAicGFkZGluZy10b3AiOiAiMCIsCiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46ICIwcHggMjBweCAwcHggMjBweCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAibGkyIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImZvbnQtc2l6ZSI6ICIyMnB4IiwgZm9udDogImJvbGRlciIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhYm91dCIgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIumhueebriIpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkcm9wZG93biIsCiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICJwYWRkaW5nLXRvcCI6ICIwIiwKICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogIjBweCAyMHB4IDBweCAyMHB4IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJsaTMiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjIycHgiLCBmb250OiAiYm9sZGVyIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NlcnZpY2UiIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCLmnI3liqEiKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZHJvcGRvd24iLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAicGFkZGluZy10b3AiOiAiMCIsCiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46ICIwcHggMjBweCAwcHggMjBweCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAibGk0IiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImZvbnQtc2l6ZSI6ICIyMnB4IiwgZm9udDogImJvbGRlciIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNleGFtcGxlIiB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigi56S65L6LIildCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRyb3Bkb3duIiwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgInBhZGRpbmctdG9wIjogIjAiLAogICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAiMHB4IDIwcHggMHB4IDIwcHgiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImxpNCIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMjJweCIsIGZvbnQ6ICJib2xkZXIiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdGVjaCIgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIuaKgOacryIpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTUiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJhYm91dC1vbmVfX2ltYWdlcyIgfSwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL3B1YmxpYy9pbWFnZXMvcmVzb3VyY2VzL2Fib3V0LTEtMS5qcGciKSwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pLAogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL3B1YmxpYy9pbWFnZXMvcmVzb3VyY2VzL2Fib3V0LTEtMi5qcGciKSwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWJvdXQtb25lX19jb3VudCB3b3cgZmFkZUluTGVmdCIsCiAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLXdvdy1kdXJhdGlvbiI6ICIxNTAwbXMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImg1IiwgW192bS5fdigi5LyX5aSa5Lit5bCP5LyB5LiaIildKSwgX2MoImg1IiwgW192bS5fdigi55qE6YCJ5oupIildKV0KICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2NrLXRpdGxlIHRleHQtbGVmdCIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2NrLXRpdGxlX19pbWFnZSIgfSksCiAgICAgIF9jKCJwIiwgW192bS5fdigiV2VsY29tZSB0byBhZ3JpY29uIildKSwKICAgICAgX2MoImgzIiwgW192bS5fdigiQmV0dGVyIEFncmljdWx0dXJlIGZvciBCZXR0ZXIgRnV0dXJlIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJhYm91dC1vbmVfX3RhZ2xpbmUiIH0sIFsKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldlIHByb3ZpZGUgcHJvZmVzc2lvbmFsIG1hcmtldGluZyAmIHByb2R1Y3Qgc291cmNlIHRyYWNpbmcgc2VydmljZSBmb3IgeW91IgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYWJvdXQtb25lX19zdW1tZXJ5IiB9LCBbCiAgICAgIF9jKCJwIiwgW192bS5fdigi5Li65oKo5o+Q5L6b5LiT5Lia55qE6JCl6ZSA5LiO5rqv5rqQ5pyN5Yqh44CCIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJwcm9qZWN0cy1vbmUgcHJvamVjdC1vbmVfX2hvbWUtb25lIiwKICAgICAgICBhdHRyczogeyBpZDogImFib3V0IiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIsIGF0dHJzOiB7IGlkOiAiY29udGFpbmVyIiB9IH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYmxvY2stdGl0bGUgdGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJibG9jay10aXRsZV9faW1hZ2UiIH0pLAogICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoImFib3V0IHVzIildKSwKICAgICAgICAgICAgX2MoImgzIiwgW192bS5fdigi6aG555uu5LuL57uNIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGhtLXN3aXBlcl9fc2xpZGVyIHN3aXBlci1jb250YWluZXIiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAiZGF0YS1zd2lwZXItb3B0aW9ucyI6CiAgICAgICAgICAgICAgICAgICd7InNwYWNlQmV0d2VlbiI6IDAsICJzbGlkZXNQZXJWaWV3IjogMSwgImxvb3AiOiB0cnVlLCAic2xpZGVzUGVyR3JvdXAiOiAxLCAicGFnaW5hdGlvbiI6IHtcbiAgICAgICAgICAiZWwiOiAiI3Byb2plY3RzLW9uZV9fc3dpcGVyLXBhZ2luYXRpb24iLFxuICAgICAgICAgICJ0eXBlIjogImJ1bGxldHMiLFxuICAgICAgICAgICJjbGlja2FibGUiOiB0cnVlXG4gICAgICB9LFxuICAgICAgImJyZWFrcG9pbnRzIjoge1xuICAgICAgICAgICIwIjoge1xuICAgICAgICAgICAgICAic3BhY2VCZXR3ZWVuIjogMCxcbiAgICAgICAgICAgICAgInNsaWRlc1BlclZpZXciOiAxLFxuICAgICAgICAgICAgICAic2xpZGVzUGVyR3JvdXAiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICAiNjQwIjoge1xuICAgICAgICAgICAgICAic3BhY2VCZXR3ZWVuIjogMzAsXG4gICAgICAgICAgICAgICJzbGlkZXNQZXJWaWV3IjogMixcbiAgICAgICAgICAgICAgInNsaWRlc1Blckdyb3VwIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgIjk5MiI6IHtcbiAgICAgICAgICAgICAgInNwYWNlQmV0d2VlbiI6IDMwLFxuICAgICAgICAgICAgICAic2xpZGVzUGVyVmlldyI6IDIsXG4gICAgICAgICAgICAgICJzbGlkZXNQZXJHcm91cCI6IDJcbiAgICAgICAgICB9XG4gICAgICB9fScKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInN3aXBlci13cmFwcGVyIiwgYXR0cnM6IHsgaWQ6ICJzdyIgfSB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInN3aXBlci1zbGlkZSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvamVjdHMtb25lX19zaW5nbGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJvZG9tZXRlciIsIGF0dHJzOiB7IGlkOiAic3AxIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigi55Sf5Lqn6YCP5piO77yM5omT6YCg5L+h6KqJIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL3B1YmxpYy9pbWFnZXMvMS5wbmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAiaW1nMSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByb2plY3RzLW9uZV9fY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaDMxIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAi6L2v56Gs5Lu25Liy6IGU5aSa5aqS5L2T5pWw5o2u77yM5Yy65Z2X6ZO+5LiK6ZSB55Sf5Lqn5L+h5oGv77yM5LiN5Y+v56+h5pS555qE5rqv5rqQ5L+h5oGv5omT6YCg5Y+v5L+h5ZOB54mMIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3dpcGVyLXNsaWRlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcm9qZWN0cy1vbmVfX3NpbmdsZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm9kb21ldGVyIiwgYXR0cnM6IHsgaWQ6ICJzcDIiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCLkuIDnianlj4znoIHvvIzlv6vmjbfmuq/mupAiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vcHVibGljL2ltYWdlcy8yLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJpbWcyIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvamVjdHMtb25lX19jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJoMzIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5L+h5oGv5b2V5YWl5LiO5L+h5oGv6L+95rqv5YiG5byA5Lik56CB77yM5rqv5rqQ6auY5pWI5b+r6YCfIikKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3dpcGVyLXNsaWRlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcm9qZWN0cy1vbmVfX3NpbmdsZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm9kb21ldGVyIiwgYXR0cnM6IHsgaWQ6ICJzcDMiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCLplIDph4/liIbmnpDvvIznsr7lh4bpooTmtYsiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vcHVibGljL2ltYWdlcy8zLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJpbWczIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvamVjdHMtb25lX19jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJoMzMiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiQVJJTUHnrpfms5Xnsr7lh4bpooTmtYvluILlnLrpnIDmsYLjgIHplIDph4/otbDlir8iKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJzd2lwZXItd3JhcHBlciIsIGF0dHJzOiB7IGlkOiAic3cyIiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3dpcGVyLXNsaWRlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcm9qZWN0cy1vbmVfX3NpbmdsZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm9kb21ldGVyIiwgYXR0cnM6IHsgaWQ6ICJzcDQiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCLllK7lkI7ov73ouKrvvIxOTFDor4TkvLAiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vcHVibGljL2ltYWdlcy80LnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJpbWc0IgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvamVjdHMtb25lX19jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJoMzQiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICLov73ouKrpob7lrqLllK7lkI7or4Tku7fvvIzlpJrnp41OTFDmqKHlnovor4TkvLDnlKjmiLfkvZPpqozvvIzliqnlipvnu4/okKXpob7lrqLotYTkuqciCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzd2lwZXItc2xpZGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByb2plY3RzLW9uZV9fc2luZ2xlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAib2RvbWV0ZXIiLCBhdHRyczogeyBpZDogInNwNSIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIuaZuuiDveaQnOe0ou+8jOS4gOiniOernuWTgSIpXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9wdWJsaWMvaW1hZ2VzLzUucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogImltZzUiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcm9qZWN0cy1vbmVfX2NvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImgzNSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIumrmOaAp+iDveahhuaetivpq5jmlYjmlbDmja7lupPnrqHnkIbvvIzotYvog73mtbfph4/lpJrmupDmlbDmja7mn6Xor6IiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzd2lwZXItc2xpZGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByb2plY3RzLW9uZV9fc2luZ2xlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAib2RvbWV0ZXIiLCBhdHRyczogeyBpZDogInNwNiIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIuWkmue7tOivhOWIhu+8jOafpea8j+ihpee8uiIpXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9wdWJsaWMvaW1hZ2VzLzYucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogImltZzYiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcm9qZWN0cy1vbmVfX2NvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImgzNiIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIua3seW6puWtpuS5oOaUr+aMgeivhOiuuuWIhuexu+WIhuaekO+8jOWkmue7tOivhOWIhue6teiniOS8mOWKo+ebiuW8iiIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgInNlY3Rpb24iLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJzZXJ2aWNlLXR3byBzZXJ2aWNlLXR3b19faG9tZS10d28iLAogICAgICAgIGF0dHJzOiB7IGlkOiAic2VydmljZSIgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYmxvY2stdGl0bGUgdGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJibG9jay10aXRsZV9faW1hZ2UiIH0pLAogICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIk91ciBTZXJ2aWNlcyBsaXN0IildKSwKICAgICAgICAgICAgX2MoImgzIiwgW192bS5fdigiV2hhdCBXZSdyZSBPZmZlcmluZyIpXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgInNlY3Rpb24iLAogICAgICB7IHN0YXRpY0NsYXNzOiAiZ3JheS1ib3hlZC13cmFwcGVyIGhvbWUtb25lX19ib3hlZCIgfSwKICAgICAgWwogICAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImZ1bmZhY3Qtb25lIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBuby1ndXR0ZXJzIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMTIgY29sLW1kLTYgY29sLWxnLTQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZnVuZmFjdC1vbmVfX3NpbmdsZSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJhZ3Jpa29uLWljb24tcGxhbnRpbmciIH0pLAogICAgICAgICAgICAgICAgICBfYygiaDMiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAib2RvbWV0ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5Lqn5ZOB5rqv5rqQIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLov73muq/nlJ/kuqfmupDlpLQiKV0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTEyIGNvbC1tZC02IGNvbC1sZy00IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZ1bmZhY3Qtb25lX19zaW5nbGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiYWdyaWtvbi1pY29uLXNob3BwaW5nLWNhcnQiIH0pLAogICAgICAgICAgICAgICAgICBfYygiaDMiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAib2RvbWV0ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5Lqn5ZOB5pCc57SiIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLmkJzntKLnm7jlhbPkuqflk4EiKV0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTEyIGNvbC1tZC02IGNvbC1sZy00IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZ1bmZhY3Qtb25lX19zaW5nbGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiYWdyaWtvbi1pY29uLWN1c3RvbWVyIiB9KSwKICAgICAgICAgICAgICAgICAgX2MoImgzIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm9kb21ldGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIuiQpemUgOWIhuaekCIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigi56ue5ZOB55S75YOP5qiq5ZCR5a+55q+UIildKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAic2VjdGlvbiIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJncmF5LWJveGVkLXdyYXBwZXIgaG9tZS1vbmVfX2JveGVkIiB9LAogICAgICBbCiAgICAgICAgX2MoInNlY3Rpb24iLCB7IHN0YXRpY0NsYXNzOiAiZnVuZmFjdC1vbmUiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IG5vLWd1dHRlcnMiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0xMiBjb2wtbWQtNiBjb2wtbGctNCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmdW5mYWN0LW9uZV9fc2luZ2xlIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImFncmlrb24taWNvbi1vcmdhbmljLWZvb2QiIH0pLAogICAgICAgICAgICAgICAgICBfYygiaDMiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAib2RvbWV0ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5L+h5oGv5b2V5YWlIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLnmbvorrDllYblk4Hlj4rmuq/mupDkv6Hmga8iKV0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTEyIGNvbC1tZC02IGNvbC1sZy00IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZ1bmZhY3Qtb25lX19zaW5nbGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiYWdyaWtvbi1pY29uLWludmVzdG1lbnQiIH0pLAogICAgICAgICAgICAgICAgICBfYygiaDMiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAib2RvbWV0ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5ZWG5Lia5rSe5a+fIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLplIDph4/otbDlkJHpooTmtYvkuI7or4Tku7fmg4XmhJ/liIbmnpAiKV0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTEyIGNvbC1tZC02IGNvbC1sZy00IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZ1bmZhY3Qtb25lX19zaW5nbGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiYWdyaWtvbi1pY29uLXZlZ2V0YWJsZSIgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIFsKICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJvZG9tZXRlciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLnq57kuonlm77osLEiKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuWTgeeJjOOAgeWTgeexu+WbvuiwseaQnOe0oiIpXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJibG9jay10aXRsZSB0ZXh0LWNlbnRlciIsIGF0dHJzOiB7IGlkOiAiZXhhbXBsZSIgfSB9LAogICAgICBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJibG9jay10aXRsZV9faW1hZ2UiIH0pLAogICAgICAgIF9jKCJwIiwgW192bS5fdigiZXhhbXBsZXMiKV0pLAogICAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIumhueebruekuuS+iyIpXSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2ctY2FyZF9fbWV0YSIgfSwgWwogICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXIgZmEtdXNlci1jaXJjbGUiIH0pLAogICAgICBfdm0uX3YoIiDkuqflk4Hmuq/mupDmqKHlnZcgIikKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJoMyIsIFtfYygiYSIsIFtfdm0uX3YoIuS6p+WTgeeUn+S6p+a1geeoi+S/oeaBryIpXSldKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2ctY2FyZF9fbWV0YSIgfSwgWwogICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXIgZmEtdXNlci1jaXJjbGUiIH0pLAogICAgICBfdm0uX3YoIiDnq57lk4HliIbmnpDmqKHlnZcgIikKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJoMyIsIFtfYygiYSIsIFtfdm0uX3YoIuS6uue+pOeUu+WDjy/nq57kuonmgKfliIbmnpAiKV0pXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJibG9nLWNhcmRfX21ldGEiIH0sIFsKICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFyIGZhLXVzZXItY2lyY2xlIiB9KSwKICAgICAgX3ZtLl92KCIg5ZWG5Lia5YiG5p6Q5qih5Z2XICIpCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiaDMiLCBbX2MoImEiLCBbX3ZtLl92KCLplIDph4/kuI7or4Tku7fliIbmnpDpooTmtYsiKV0pXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJibG9nLWNhcmRfX21ldGEiIH0sIFsKICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFyIGZhLXVzZXItY2lyY2xlIiB9KSwKICAgICAgX3ZtLl92KCIg5L+h5oGv566h55CG5qih5Z2XICIpCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiaDMiLCBbX2MoImEiLCBbX3ZtLl92KCLllYblk4Hlkozmuq/mupDkv6Hmga/lvZXlhaXkuI7nrqHnkIYiKV0pXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJibG9jay10aXRsZSB0ZXh0LWNlbnRlciIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJsb2NrLXRpdGxlX19pbWFnZSIgfSksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVGVjaG5vbG9neSIpXSksCiAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIuaKgOacr+agiCIpXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}