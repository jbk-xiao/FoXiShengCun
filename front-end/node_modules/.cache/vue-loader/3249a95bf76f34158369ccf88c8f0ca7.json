{"remainingRequest":"E:\\faxianbei\\faxianbei7.5\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\faxianbei\\faxianbei7.5\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\faxianbei\\faxianbei7.5\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\faxianbei\\faxianbei7.5\\src\\views\\TqCompetitiveProducts.vue?vue&type=template&id=39919e8c&scoped=true&","dependencies":[{"path":"E:\\faxianbei\\faxianbei7.5\\src\\views\\TqCompetitiveProducts.vue","mtime":1615203857285},{"path":"E:\\faxianbei\\faxianbei7.5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\faxianbei\\faxianbei7.5\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\faxianbei\\faxianbei7.5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\faxianbei\\faxianbei7.5\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}